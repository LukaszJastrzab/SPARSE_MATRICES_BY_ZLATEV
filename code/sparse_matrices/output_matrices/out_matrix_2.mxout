\=================== DYNCAMIC STORAGE SCHEME ===================
number of rows       :10
number of columns    :10
dynamic state        :COL_INIT

PIVOT: [PIVOT[idx],idx]
[0,0][0,1][0,2][0,3][0,4][0,5][0,6][0,7][0,8][0,9]

\----------------- ROW ORDERED LIST -----------------
size of row-ordered list                  :35
last not free position in ROL             :34
number of non-zeros actualy stored in ROL :35

memory usage   :ooooooooooooooooooooooooooooooooooo
indexes % 1    :01234567890123456789012345678901234
indexes % 10   :0         1         2         3    
H[.][1] % 10   :0  1  2   3 4   5    6  7  8    9  
H[.][2] % 10   :0  1  2   3 4   5    6  7  8    9  
H[.][3] % 10   :  0  1   2 3   4    5  6  7    8  9

row =      0   1   2   3   4   5   6   7   8   9
H[.][1]:   0   3   6  10  12  16  21  24  27  32
H[.][2]:   0   3   6  10  12  16  21  24  27  32
H[.][3]:   2   5   9  11  15  20  23  26  31  34

(original row number, its current position):[CNLU,idx],...
(0,0): [  0,  0][  1,  1][  5,  2]
(1,1): [  2,  3][  4,  4][  6,  5]
(2,2): [  1,  6][  3,  7][  5,  8][  6,  9]
(3,3): [  1, 10][  2, 11]
(4,4): [  0, 12][  3, 13][  5, 14][  7, 15]
(5,5): [  0, 16][  2, 17][  3, 18][  6, 19][  8, 20]
(6,6): [  4, 21][  5, 22][  7, 23]
(7,7): [  2, 24][  6, 25][  7, 26]
(8,8): [  0, 27][  4, 28][  5, 29][  8, 30][  9, 31]
(9,9): [  1, 32][  2, 33][  9, 34]

row permutations:
           0  1  2  3  4  5  6  7  8  9
HA[][7]:   0  1  2  3  4  5  6  7  8  9
HA[][8]:   0  1  2  3  4  5  6  7  8  9

\---------------- COLUMN ORDERED LIST ----------------
size of column-ordered list               :35
last not free position in COL             :34
number of non-zeros actualy stored in COL :35

memory usage   :ooooooooooooooooooooooooooooooooooo
indexes % 1    :01234567890123456789012345678901234
indexes % 10   :0         1         2         3    
H[.][4] % 10   :0   1   2    3  4  5    6   7  8 9 
H[.][5] % 10   :0   1   2    3  4  5    6   7  8 9 
H[.][6] % 10   :   0   1    2  3  4    5   6  7 8 9

col =      0   1   2   3   4   5   6   7   8   9
H[.][4]:   0   4   8  13  16  19  24  28  31  33
H[.][5]:   0   4   8  13  16  19  24  28  31  33
H[.][6]:   3   7  12  15  18  23  27  30  32  34

(original column number, its current position):[ALU,RNLU,idx],...
           (  0,  0)           (  1,  1)           (  2,  2)           (  3,  3)           (  4,  4)           (  5,  5)           (  6,  6)           (  7,  7)           (  8,  8)           (  9,  9)
[         7,  0,  0][         5,  0,  4][         2,  1,  8][         5,  2, 13][     20.02,  1, 16][         5,  0, 19][         1,  1, 24][     10.49,  4, 28][         4,  5, 31][         8,  8, 33]
[         4,  4,  1][         8,  2,  5][         6,  3,  9][         6,  4, 14][         9,  6, 17][         7,  2, 20][         6,  2, 25][         5,  6, 29][         6,  8, 32][         4,  9, 34]
[         2,  5,  2][         2,  3,  6][         2,  5, 10][         8,  5, 15][         9,  8, 18][         1,  4, 21][         5,  5, 26][         2,  7, 30]                                        
[         5,  8,  3][         6,  9,  7][         5,  7, 11]                                        [         8,  6, 22][         1,  7, 27]                                                            
                                        [         5,  9, 12]                                        [         8,  8, 23]                                                                                
                                                                                                                                                                                                        

column permutations:
           0  1  2  3  4  5  6  7  8  9
HA[][9]:   0  1  2  3  4  5  6  7  8  9
HA[][10]:  0  1  2  3  4  5  6  7  8  9

\---------------- WORKING PART OF INTEGRITY TABLE  ----------------
           0  1  2  3  4  5  6  7  8  9
HA[][0]:  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1

\============================ MATRIX RECONSTRUCTION ============================